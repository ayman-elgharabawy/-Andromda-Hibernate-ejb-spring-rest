// license-header java merge-point
/* Autogenerated on 03/19/2016 08:16:04+0200 by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/WebServiceEndpoint.vsl in andromda-webservice cartridge
 * MODEL CLASS: Data::com.vis.oubl::service::SearchService
 * STEREOTYPE:  WebService
*/
package com.vis.oubl.service;

import com.vis.oubl.vo.My010CustomerVO;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * WebService Service Endpoint Implementation for the SearchService service endpoint interface (SearchServiceSEI).
 * 
 */

@Path("/searchservice")
@Produces("application/json")
public class SearchServiceSEIImpl implements SearchServiceSEI
{
    private static final Logger LOG = LoggerFactory.getLogger(SearchServiceSEIImpl.class);
    private static final String className = "SearchServiceSEIImpl";

   /**
    * Invokes the createCustomer service method on SearchService.
    * 
    * @param patient My010CustomerVO required=true 
    * @return createCustomerResponse Integer
    * @see SearchServiceSEI#createCustomer(My010CustomerVO)
    */
    @Override
    @PUT
    @Path("/patient")
    @Produces("application/json")
    @Consumes("application/json")
    public Integer createCustomer
    (
         My010CustomerVO patient
    )
    {
        LOG.info(SearchServiceSEIImpl.className + ".createCustomer: Executing with: "  + patient);

        StringBuilder missing = new StringBuilder();

        if (patient!=null)
        {

        }
        else
        {
            missing.append("patient ");
        }

        if (missing.length()>0)
        {
            missing = missing.insert(0, "The following required parameters are missing from SearchService.createCustomer: ");
            CreateCustomer createCustomerReq = new CreateCustomer();
            createCustomerReq.setPatient(patient);
            LOG.error("SearchServiceSEIImpl.createCustomer: " + missing.toString() + " in " + createCustomerReq.toString());
            throw new IllegalArgumentException(missing.toString());
        }
        SearchServiceWSDelegate delegate = new SearchServiceWSDelegate();
        Integer integerReturn = delegate.createCustomer(patient);
        LOG.info(SearchServiceSEIImpl.className + "createCustomer: Returning SearchService.createCustomer: " + integerReturn);
        return integerReturn;
    }

   /**
    * Invokes the customerSearch service method on SearchService.
    * 
    * @param id datatype Integer required=true 
    * @return customerSearchResponse Object
    * @see SearchServiceSEI#customerSearch(Integer)
    */
    @Override
    @GET
    @Path("/patient/{id}")
    @Produces("application/json")
    @Consumes("application/json")
    public Object customerSearch
    (
        @PathParam("id") Integer id
    )
    {
        LOG.info(SearchServiceSEIImpl.className + ".customerSearch: Executing with: "  + id);

        StringBuilder missing = new StringBuilder();

        if (id!=null)
        {

        }
        else
        {
            missing.append("id ");
        }

        if (missing.length()>0)
        {
            missing = missing.insert(0, "The following required parameters are missing from SearchService.customerSearch: ");
            CustomerSearch customerSearchReq = new CustomerSearch();
            customerSearchReq.setId(id);
            LOG.error("SearchServiceSEIImpl.customerSearch: " + missing.toString() + " in " + customerSearchReq.toString());
            throw new IllegalArgumentException(missing.toString());
        }
        SearchServiceWSDelegate delegate = new SearchServiceWSDelegate();
        Object objectReturn = delegate.customerSearch(id);
        LOG.info(SearchServiceSEIImpl.className + "customerSearch: Returning SearchService.customerSearch: " + objectReturn);
        return objectReturn;
    }

   /**
    * Invokes the customersQuery service method on SearchService.
    * 
    * @return customersQueryResponse Object
    * @see SearchServiceSEI#customersQuery()
    */
    @Override
    @GET
    @Path("/patient/")
    @Produces("application/json")
    @Consumes("application/json")
    public Object customersQuery
    (
    )
    {
        LOG.info(SearchServiceSEIImpl.className + ".customersQuery: Executing with: " );

        SearchServiceWSDelegate delegate = new SearchServiceWSDelegate();
        Object objectReturn = delegate.customersQuery();
        LOG.info(SearchServiceSEIImpl.className + "customersQuery: Returning SearchService.customersQuery: " + objectReturn);
        return objectReturn;
    }

   /**
    * Invokes the deleteCustomer service method on SearchService.
    * 
    * @param id datatype Long required=true 
    * @return deleteCustomerResponse Integer
    * @see SearchServiceSEI#deleteCustomer(Long)
    */
    @Override
    @DELETE
    @Path("/patient/{id}")
    @Produces("application/json")
    @Consumes("application/json")
    public Integer deleteCustomer
    (
        @PathParam("id") Long id
    )
    {
        LOG.info(SearchServiceSEIImpl.className + ".deleteCustomer: Executing with: "  + id);

        StringBuilder missing = new StringBuilder();

        if (id!=null)
        {

        }
        else
        {
            missing.append("id ");
        }

        if (missing.length()>0)
        {
            missing = missing.insert(0, "The following required parameters are missing from SearchService.deleteCustomer: ");
            DeleteCustomer deleteCustomerReq = new DeleteCustomer();
            deleteCustomerReq.setId(id);
            LOG.error("SearchServiceSEIImpl.deleteCustomer: " + missing.toString() + " in " + deleteCustomerReq.toString());
            throw new IllegalArgumentException(missing.toString());
        }
        SearchServiceWSDelegate delegate = new SearchServiceWSDelegate();
        Integer integerReturn = delegate.deleteCustomer(id);
        LOG.info(SearchServiceSEIImpl.className + "deleteCustomer: Returning SearchService.deleteCustomer: " + integerReturn);
        return integerReturn;
    }

   /**
    * Invokes the updateCustomer service method on SearchService.
    * 
    * @param patient My010CustomerVO required=true 
    * @return updateCustomerResponse Integer
    * @see SearchServiceSEI#updateCustomer(My010CustomerVO)
    */
    @Override
    @POST
    @Path("/patient/{id}")
    @Produces("application/json")
    @Consumes("application/json")
    public Integer updateCustomer
    (
         My010CustomerVO patient
    )
    {
        LOG.info(SearchServiceSEIImpl.className + ".updateCustomer: Executing with: "  + patient);

        StringBuilder missing = new StringBuilder();

        if (patient!=null)
        {

        }
        else
        {
            missing.append("patient ");
        }

        if (missing.length()>0)
        {
            missing = missing.insert(0, "The following required parameters are missing from SearchService.updateCustomer: ");
            UpdateCustomer updateCustomerReq = new UpdateCustomer();
            updateCustomerReq.setPatient(patient);
            LOG.error("SearchServiceSEIImpl.updateCustomer: " + missing.toString() + " in " + updateCustomerReq.toString());
            throw new IllegalArgumentException(missing.toString());
        }
        SearchServiceWSDelegate delegate = new SearchServiceWSDelegate();
        Integer integerReturn = delegate.updateCustomer(patient);
        LOG.info(SearchServiceSEIImpl.className + "updateCustomer: Returning SearchService.updateCustomer: " + integerReturn);
        return integerReturn;
    }
}