// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.vis.oubl.domain;

import com.vis.oubl.PrincipalStore;
import com.vis.oubl.PropertySearch;
import com.vis.oubl.Search;
import com.vis.oubl.vo.My010CustomerVO;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.andromda.spring.PaginationResult;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.ScrollableResults;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>My010Customer</code>.
 * </p>
 *
 * @see My010Customer
 */
public abstract class My010CustomerDaoBase
    extends HibernateDaoSupport
    implements My010CustomerDao
{
    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.get - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get(My010CustomerImpl.class, id);
        return transformEntity(transform, (My010Customer)entity);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public My010Customer get(Long id)
    {
        return (My010Customer)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.load - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get(My010CustomerImpl.class, id);
        return transformEntity(transform, (My010Customer)entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public My010Customer load(Long id)
    {
        return (My010Customer)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<My010Customer> loadAll()
    {
        return (Collection<My010Customer>) this.loadAll(My010CustomerDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(My010CustomerDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final Criteria criteria = this.getSession(false).createCriteria(My010CustomerImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final Collection<?> results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public My010Customer create(My010Customer my010Customer)
    {
        return (My010Customer)this.create(My010CustomerDao.TRANSFORM_NONE, my010Customer);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, final My010Customer my010Customer)
    {
        if (my010Customer == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.create - 'my010Customer' can not be null");
        }
        this.getHibernateTemplate().save(my010Customer);
        return this.transformEntity(transform, my010Customer);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<My010Customer> create(final Collection<My010Customer> entities)
    {
        return (Collection<My010Customer>) create(My010CustomerDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> create(final int transform, final Collection<My010Customer> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for (My010Customer entity : entities)
                    {
                        create(transform, entity);
                    }
                    return null;
                }
            });
        return entities;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public My010Customer create(
        String firstName,
        String lastName,
        String middleName,
        Integer identityNumber,
        Integer insuranceNumber,
        String address,
        Long mobileNumber,
        Integer telephoneNumber,
        String nationality,
        String type)
    {
        return (My010Customer)this.create(My010CustomerDao.TRANSFORM_NONE, firstName, lastName, middleName, identityNumber, insuranceNumber, address, mobileNumber, telephoneNumber, nationality, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        String firstName,
        String lastName,
        String middleName,
        Integer identityNumber,
        Integer insuranceNumber,
        String address,
        Long mobileNumber,
        Integer telephoneNumber,
        String nationality,
        String type)
    {
        My010Customer entity = new My010CustomerImpl();
        entity.setFirstName(firstName);
        entity.setLastName(lastName);
        entity.setMiddleName(middleName);
        entity.setIdentityNumber(identityNumber);
        entity.setInsuranceNumber(insuranceNumber);
        entity.setAddress(address);
        entity.setMobileNumber(mobileNumber);
        entity.setTelephoneNumber(telephoneNumber);
        entity.setNationality(nationality);
        entity.setType(type);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(My010Customer my010Customer)
    {
        if (my010Customer == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.update - 'my010Customer' can not be null");
        }
        this.getHibernateTemplate().update(my010Customer);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Collection<My010Customer> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for (My010Customer entity : entities)
                    {
                        update(entity);
                    }
                    return null;
                }
            });
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(My010Customer my010Customer)
    {
        if (my010Customer == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.remove - 'my010Customer' can not be null");
        }
        this.getHibernateTemplate().delete(my010Customer);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.remove - 'id' can not be null");
        }
        My010Customer entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Collection<My010Customer> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "My010Customer.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public My010CustomerVO[] queryAllCustomer()
    {
        try
        {
            return this.handleQueryAllCustomer();
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'My010CustomerDao.queryAllCustomer()' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #queryAllCustomer()}
     * @return My010CustomerVO[]
     * @throws Exception
     */
    protected abstract My010CustomerVO[] handleQueryAllCustomer()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public My010CustomerVO getCustomerByTelephoneNumber(final Long telephoneNumber)
    {
        if (telephoneNumber == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.domain.My010CustomerDao.getCustomerByTelephoneNumber(Long telephoneNumber) - 'telephoneNumber' can not be null");
        }
        try
        {
            return this.handleGetCustomerByTelephoneNumber(telephoneNumber);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'My010CustomerDao.getCustomerByTelephoneNumber(Long telephoneNumber)' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #getCustomerByTelephoneNumber(Long)}
     * @param telephoneNumber
     * @return My010CustomerVO
     * @throws Exception
     */
    protected abstract My010CustomerVO handleGetCustomerByTelephoneNumber(Long telephoneNumber)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public My010CustomerVO getCustomertById(final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.domain.My010CustomerDao.getCustomertById(Long id) - 'id' can not be null");
        }
        try
        {
            return this.handleGetCustomertById(id);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing 'My010CustomerDao.getCustomertById(Long id)' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #getCustomertById(Long)}
     * @param id
     * @return My010CustomerVO
     * @throws Exception
     */
    protected abstract My010CustomerVO handleGetCustomertById(Long id)
        throws Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>My010CustomerDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link My010Customer} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link My010CustomerVO} - {@link #TRANSFORM_MY010CUSTOMERVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link My010CustomerDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see My010CustomerDao#transformEntity(int, My010Customer)
     */
    public Object transformEntity(final int transform, final My010Customer entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_MY010CUSTOMERVO :
                    target = toMy010CustomerVO(entity);
                    break;
                case My010CustomerDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_MY010CUSTOMERVO :
                toMy010CustomerVOCollection(entities);
                break;
            case My010CustomerDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see My010CustomerDao#toEntities(Collection)
     */
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link My010Customer}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    result = toEntity((Object[])input);
                }
                else if (input instanceof My010Customer)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return My010Customer
     */
    protected My010Customer toEntity(Object[] row)
    {
        My010Customer target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof My010Customer)
                {
                    target = (My010Customer)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final Collection toMy010CustomerVOCollection(Collection<?> entities)
    {
        Collection result = new ArrayList<My010CustomerVO>();
        if (entities != null)
        {
            CollectionUtils.transform(entities, this.MY010CUSTOMERVO_TRANSFORMER);
            result.addAll((Collection) entities);
        }
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public final My010CustomerVO[] toMy010CustomerVOArray(Collection<?> entities)
    {
        My010CustomerVO[] result = null;
        if (entities != null)
        {
            // Unchecked transformation: reuses entities Collection
            final Collection collection = new ArrayList(entities);
            this.toMy010CustomerVOCollection(collection);
            result = (My010CustomerVO[]) collection.toArray(new My010CustomerVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link My010CustomerDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toMy010CustomerVO(this.toEntity(row))
     * @see My010CustomerDao#toMy010CustomerVO(My010Customer)
     */
    protected My010CustomerVO toMy010CustomerVO(Object[] row)
    {
        return this.toMy010CustomerVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link My010CustomerVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer MY010CUSTOMERVO_TRANSFORMER =
        new Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof My010Customer)
                {
                    result = toMy010CustomerVO((My010Customer)input);
                }
                else if (input instanceof Object[])
                {
                    result = toMy010CustomerVO((Object[])input);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public final void my010CustomerVOToEntityCollection(Collection<?> instances)
    {
        if (instances != null)
        {
            for (final Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof My010CustomerVO))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.My010CustomerVOToEntityTransformer);
        }
    }

    private final Transformer My010CustomerVOToEntityTransformer =
        new Transformer()
        {
            public Object transform(Object input)
            {
                return my010CustomerVOToEntity((My010CustomerVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toMy010CustomerVO(
        My010Customer source,
        My010CustomerVO target)
    {
        target.setId(source.getId());
        target.setFirstName(source.getFirstName());
        target.setLastName(source.getLastName());
        target.setMiddleName(source.getMiddleName());
        target.setIdentityNumber(source.getIdentityNumber());
        target.setInsuranceNumber(source.getInsuranceNumber());
        target.setAddress(source.getAddress());
        target.setMobileNumber(source.getMobileNumber());
        target.setTelephoneNumber(source.getTelephoneNumber());
        target.setNationality(source.getNationality());
        target.setType(source.getType());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public My010CustomerVO toMy010CustomerVO(final My010Customer entity)
    {
        My010CustomerVO target = null;
        if (entity != null)
        {
            target =  new My010CustomerVO();
            this.toMy010CustomerVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void my010CustomerVOToEntity(
        My010CustomerVO source,
        My010Customer target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getFirstName() != null)
        {
            target.setFirstName(source.getFirstName());
        }
        if (copyIfNull || source.getLastName() != null)
        {
            target.setLastName(source.getLastName());
        }
        if (copyIfNull || source.getMiddleName() != null)
        {
            target.setMiddleName(source.getMiddleName());
        }
        if (copyIfNull || source.getIdentityNumber() != null)
        {
            target.setIdentityNumber(source.getIdentityNumber());
        }
        if (copyIfNull || source.getInsuranceNumber() != null)
        {
            target.setInsuranceNumber(source.getInsuranceNumber());
        }
        if (copyIfNull || source.getAddress() != null)
        {
            target.setAddress(source.getAddress());
        }
        if (copyIfNull || source.getMobileNumber() != null)
        {
            target.setMobileNumber(source.getMobileNumber());
        }
        if (copyIfNull || source.getTelephoneNumber() != null)
        {
            target.setTelephoneNumber(source.getTelephoneNumber());
        }
        if (copyIfNull || source.getNationality() != null)
        {
            target.setNationality(source.getNationality());
        }
        if (copyIfNull || source.getType() != null)
        {
            target.setType(source.getType());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), My010CustomerImpl.class, search);
            final List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object[results.size()]), propertySearch.getTotalCount());
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search)
    {
        return this.search(My010CustomerDao.TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Set<?> search(final int transform, final Search search)
    {
        try
        {
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), My010CustomerImpl.class, search);
            final Set<?> results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Set<My010Customer> search(final Search search)
    {
        return (Set<My010Customer>) this.search(My010CustomerDao.TRANSFORM_NONE, search);
    }

    /**
     * Executes and returns the given Hibernate queryObject as a {@link PaginationResult} instance.
     * @param queryObject
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @return PaginationResult
     */
    @SuppressWarnings({ "unchecked" })
    protected PaginationResult getPaginationResult(
        final Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
        try
        {
            final ScrollableResults scrollableResults = queryObject.scroll();
            scrollableResults.last();
            int totalCount = scrollableResults.getRowNumber();
            totalCount = totalCount >= 0 ? totalCount + 1 : 0;
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            // Unchecked transformation because Set object is reused, cannot be strongly typed.
            Set results = new LinkedHashSet(queryObject.list());
            transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object[results.size()]), totalCount);
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    // spring-hibernate-dao-base merge-point
}