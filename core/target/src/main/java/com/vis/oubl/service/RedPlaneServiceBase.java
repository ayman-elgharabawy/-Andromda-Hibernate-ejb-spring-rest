// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: Data::com.vis.oubl::service::RedPlaneService
 * STEREOTYPE:  Service
 */
package com.vis.oubl.service;

import com.vis.oubl.BeanLocator;
import com.vis.oubl.PrincipalStore;
import com.vis.oubl.domain.RedPlaneServiceDao;
import com.vis.oubl.vo.RedPlaneServiceVO;
import java.security.Principal;
import java.util.Locale;
import org.springframework.context.MessageSource;

/**
 * <p>
 * Spring Service base class for <code>RedPlaneService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see RedPlaneService
 */
public abstract class RedPlaneServiceBase
    implements RedPlaneService
{
    private RedPlaneServiceDao redPlaneServiceDao;

    /**
     * Sets the reference to <code>redPlaneService</code>'s DAO.
     * @param redPlaneServiceDaoIn
     */
    public void setRedPlaneServiceDao(RedPlaneServiceDao redPlaneServiceDaoIn)
    {
        this.redPlaneServiceDao = redPlaneServiceDaoIn;
    }

    /**
     * Gets the reference to <code>redPlaneService</code>'s DAO.
     * @return redPlaneServiceDao
     */
    protected RedPlaneServiceDao getRedPlaneServiceDao()
    {
        return this.redPlaneServiceDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedPlaneServiceVO[] getRedPlanerService()
    {
        try
        {
            return this.handleGetRedPlanerService();
        }
        catch (Throwable th)
        {
            throw new RedPlaneServiceException(
                "Error performing 'RedPlaneService.getRedPlanerService()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getRedPlanerService()}
     * @return RedPlaneServiceVO[]
     * @throws Exception
     */
    protected abstract RedPlaneServiceVO[] handleGetRedPlanerService()
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return (MessageSource)
            BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}