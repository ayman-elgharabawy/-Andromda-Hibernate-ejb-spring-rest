// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateSearchProperties.vsl in andromda-spring-cartridge.
//
package com.vis.oubl;

import com.vis.oubl.domain.CustomerImpl;
import com.vis.oubl.domain.ItemImpl;
import com.vis.oubl.domain.PhysicalCountingImpl;
import com.vis.oubl.domain.PricePlanImpl;
import com.vis.oubl.domain.RFIDImpl;
import com.vis.oubl.domain.SalesRecusitionImpl;
import com.vis.oubl.domain.StoreImpl;
import com.vis.oubl.domain.SupplierImpl;
import com.vis.oubl.domain.TransactionImpl;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Predicate;

/**
 * Stores the embedded values and associations of all entities in the system by type.
 * Is used to determine the appropriate parameter name when an embedded value's property
 * is referenced as the attribute to search by (as opposed to an association).
 *
 * @author Chad Brandon
 */
@SuppressWarnings({"unchecked"})
public class CriteriaSearchProperties
{
    private static final Map embeddedValuesByType = new HashMap();
    private static final Map embeddedValueNamesByType = new HashMap();
    private static final Map navigableAssociationEndsByType = new HashMap();

    static
    {
        initializeItem1();
        initializeStore2();
        initializeTransaction3();
        initializeRFID4();
        initializeSupplier5();
        initializePhysicalCounting6();
        initializeCustomer7();
        initializeSalesRecusition8();
        initializePricePlan9();
    }

    private static final void initializeItem1()
    {
        embeddedValueNamesByType.put(
            ItemImpl.class,
            null);
        embeddedValuesByType.put(
            ItemImpl.class,
            null);
        navigableAssociationEndsByType.put(
            ItemImpl.class,
            null);
    }

    private static final void initializeStore2()
    {
        embeddedValueNamesByType.put(
            StoreImpl.class,
            null);
        embeddedValuesByType.put(
            StoreImpl.class,
            null);
        navigableAssociationEndsByType.put(
            StoreImpl.class,
            null);
    }

    private static final void initializeTransaction3()
    {
        embeddedValueNamesByType.put(
            TransactionImpl.class,
            null);
        embeddedValuesByType.put(
            TransactionImpl.class,
            null);
        navigableAssociationEndsByType.put(
            TransactionImpl.class,
            null);
    }

    private static final void initializeRFID4()
    {
        embeddedValueNamesByType.put(
            RFIDImpl.class,
            null);
        embeddedValuesByType.put(
            RFIDImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RFIDImpl.class,
            null);
    }

    private static final void initializeSupplier5()
    {
        embeddedValueNamesByType.put(
            SupplierImpl.class,
            null);
        embeddedValuesByType.put(
            SupplierImpl.class,
            null);
        navigableAssociationEndsByType.put(
            SupplierImpl.class,
            null);
    }

    private static final void initializePhysicalCounting6()
    {
        embeddedValueNamesByType.put(
            PhysicalCountingImpl.class,
            null);
        embeddedValuesByType.put(
            PhysicalCountingImpl.class,
            null);
        navigableAssociationEndsByType.put(
            PhysicalCountingImpl.class,
            null);
    }

    private static final void initializeCustomer7()
    {
        embeddedValueNamesByType.put(
            CustomerImpl.class,
            null);
        embeddedValuesByType.put(
            CustomerImpl.class,
            null);
        navigableAssociationEndsByType.put(
            CustomerImpl.class,
            null);
    }

    private static final void initializeSalesRecusition8()
    {
        embeddedValueNamesByType.put(
            SalesRecusitionImpl.class,
            null);
        embeddedValuesByType.put(
            SalesRecusitionImpl.class,
            null);
        navigableAssociationEndsByType.put(
            SalesRecusitionImpl.class,
            null);
    }

    private static final void initializePricePlan9()
    {
        embeddedValueNamesByType.put(
            PricePlanImpl.class,
            null);
        embeddedValuesByType.put(
            PricePlanImpl.class,
            null);
        navigableAssociationEndsByType.put(
            PricePlanImpl.class,
            null);
    }

    /**
     * Attempts to get the embedded value list for the given type (or returns null
     * if one doesn't exist).
     *
     * @param type the type of which to retrieve the value.
     * @return the collection of embedded value names.
     */
    public static Collection getEmbeddedValues(final Class type)
    {
        return (Collection)embeddedValueNamesByType.get(type);
    }

    /**
     * Gets the type of the navigable association end given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getNavigableAssociationEndType(final Class ownerType, final String name)
    {
        return getPropertyType(navigableAssociationEndsByType, ownerType, name);
    }

    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getEmbeddedValueType(final Class ownerType, final String name)
    {
        return getPropertyType(embeddedValuesByType, ownerType, name);
    }

    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param properties Map contains the Collection of properties given the ownerType Class
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final Map properties, final Class ownerType, final String name)
    {
        final Collection ends = (Collection)properties.get(ownerType);
        final PropertyType type = (PropertyType)CollectionUtils.find(
            ends,
            new Predicate()
            {
                public boolean evaluate(final Object object)
                {
                    return ((PropertyType)object).name.equals(name);
                }
            });
        return type != null ? type.type : null;
    }

    /**
     * Gets the type of the property given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final Class ownerType, final String name)
    {
        Class type = getNavigableAssociationEndType(ownerType, name);
        if (type == null)
        {
            type = getEmbeddedValueType(ownerType, name);
        }
        return type;
    }

    /**
     * A private class storing the name and type.
     */
    protected static final class PropertyType
    {
        /**
         * @param nameIn
         * @param typeIn
         */
        protected PropertyType(final String nameIn, final Class typeIn)
        {
            this.name = nameIn;
            this.type = typeIn;
        }

        /** PropertyType name */
        protected String name;
        /** PropertyType type Class */
        protected Class type;
    }
}