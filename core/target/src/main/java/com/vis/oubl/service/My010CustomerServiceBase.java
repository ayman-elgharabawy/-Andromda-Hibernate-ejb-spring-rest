// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: Data::com.vis.oubl::service::My010CustomerService
 * STEREOTYPE:  Service
 */
package com.vis.oubl.service;

import com.vis.oubl.BeanLocator;
import com.vis.oubl.PrincipalStore;
import com.vis.oubl.domain.My010CustomerDao;
import com.vis.oubl.vo.My010CustomerVO;
import java.security.Principal;
import java.util.Locale;
import org.springframework.context.MessageSource;

/**
 * <p>
 * Spring Service base class for <code>My010CustomerService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see My010CustomerService
 */
public abstract class My010CustomerServiceBase
    implements My010CustomerService
{
    private My010CustomerDao my010CustomerDao;

    /**
     * Sets the reference to <code>my010Customer</code>'s DAO.
     * @param my010CustomerDaoIn
     */
    public void setMy010CustomerDao(My010CustomerDao my010CustomerDaoIn)
    {
        this.my010CustomerDao = my010CustomerDaoIn;
    }

    /**
     * Gets the reference to <code>my010Customer</code>'s DAO.
     * @return my010CustomerDao
     */
    protected My010CustomerDao getMy010CustomerDao()
    {
        return this.my010CustomerDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public My010CustomerVO getCustomernfoByMobileNumber(final Long mobileNumber)
    {
        if (mobileNumber == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.getCustomernfoByMobileNumber(Long mobileNumber) - 'mobileNumber' can not be null");
        }
        try
        {
            return this.handleGetCustomernfoByMobileNumber(mobileNumber);
        }
        catch (Throwable th)
        {
            throw new My010CustomerServiceException(
                "Error performing 'My010CustomerService.getCustomernfoByMobileNumber(Long mobileNumber)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getCustomernfoByMobileNumber(Long)}
     * @param mobileNumber Long 
     * @return My010CustomerVO
     * @throws Exception
     */
    protected abstract My010CustomerVO handleGetCustomernfoByMobileNumber(Long mobileNumber)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public My010CustomerVO[] getAllCustomers()
    {
        try
        {
            return this.handleGetAllCustomers();
        }
        catch (Throwable th)
        {
            throw new My010CustomerServiceException(
                "Error performing 'My010CustomerService.getAllCustomers()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAllCustomers()}
     * @return My010CustomerVO[]
     * @throws Exception
     */
    protected abstract My010CustomerVO[] handleGetAllCustomers()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public My010CustomerVO getCustomerById(final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.getCustomerById(Long id) - 'id' can not be null");
        }
        try
        {
            return this.handleGetCustomerById(id);
        }
        catch (Throwable th)
        {
            throw new My010CustomerServiceException(
                "Error performing 'My010CustomerService.getCustomerById(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getCustomerById(Long)}
     * @param id Long 
     * @return My010CustomerVO
     * @throws Exception
     */
    protected abstract My010CustomerVO handleGetCustomerById(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer createCustomer(final My010CustomerVO patient)
    {
        if (patient == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.createCustomer(My010CustomerVO patient) - 'patient' can not be null");
        }
        if (patient.getFirstName() == null || patient.getFirstName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.createCustomer(My010CustomerVO patient) - 'patient.firstName' can not be null or empty");
        }
        if (patient.getLastName() == null || patient.getLastName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.createCustomer(My010CustomerVO patient) - 'patient.lastName' can not be null or empty");
        }
        if (patient.getMiddleName() == null || patient.getMiddleName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.createCustomer(My010CustomerVO patient) - 'patient.middleName' can not be null or empty");
        }
        if (patient.getAddress() == null || patient.getAddress().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.createCustomer(My010CustomerVO patient) - 'patient.address' can not be null or empty");
        }
        if (patient.getNationality() == null || patient.getNationality().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.createCustomer(My010CustomerVO patient) - 'patient.nationality' can not be null or empty");
        }
        if (patient.getType() == null || patient.getType().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.createCustomer(My010CustomerVO patient) - 'patient.type' can not be null or empty");
        }
        try
        {
            return this.handleCreateCustomer(patient);
        }
        catch (Throwable th)
        {
            throw new My010CustomerServiceException(
                "Error performing 'My010CustomerService.createCustomer(My010CustomerVO patient)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #createCustomer(My010CustomerVO)}
     * @param patient My010CustomerVO 
     * @return Integer
     * @throws Exception
     */
    protected abstract Integer handleCreateCustomer(My010CustomerVO patient)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer editCustomer(final My010CustomerVO patient)
    {
        if (patient == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.editCustomer(My010CustomerVO patient) - 'patient' can not be null");
        }
        if (patient.getFirstName() == null || patient.getFirstName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.editCustomer(My010CustomerVO patient) - 'patient.firstName' can not be null or empty");
        }
        if (patient.getLastName() == null || patient.getLastName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.editCustomer(My010CustomerVO patient) - 'patient.lastName' can not be null or empty");
        }
        if (patient.getMiddleName() == null || patient.getMiddleName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.editCustomer(My010CustomerVO patient) - 'patient.middleName' can not be null or empty");
        }
        if (patient.getAddress() == null || patient.getAddress().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.editCustomer(My010CustomerVO patient) - 'patient.address' can not be null or empty");
        }
        if (patient.getNationality() == null || patient.getNationality().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.editCustomer(My010CustomerVO patient) - 'patient.nationality' can not be null or empty");
        }
        if (patient.getType() == null || patient.getType().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.editCustomer(My010CustomerVO patient) - 'patient.type' can not be null or empty");
        }
        try
        {
            return this.handleEditCustomer(patient);
        }
        catch (Throwable th)
        {
            throw new My010CustomerServiceException(
                "Error performing 'My010CustomerService.editCustomer(My010CustomerVO patient)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #editCustomer(My010CustomerVO)}
     * @param patient My010CustomerVO 
     * @return Integer
     * @throws Exception
     */
    protected abstract Integer handleEditCustomer(My010CustomerVO patient)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer deleteCustomer(final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.deleteCustomer(Long id) - 'id' can not be null");
        }
        try
        {
            return this.handleDeleteCustomer(id);
        }
        catch (Throwable th)
        {
            throw new My010CustomerServiceException(
                "Error performing 'My010CustomerService.deleteCustomer(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #deleteCustomer(Long)}
     * @param id Long 
     * @return Integer
     * @throws Exception
     */
    protected abstract Integer handleDeleteCustomer(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public String getBalance(final Integer custid)
    {
        if (custid == null)
        {
            throw new IllegalArgumentException(
                "com.vis.oubl.service.My010CustomerService.getBalance(Integer custid) - 'custid' can not be null");
        }
        try
        {
            return this.handleGetBalance(custid);
        }
        catch (Throwable th)
        {
            throw new My010CustomerServiceException(
                "Error performing 'My010CustomerService.getBalance(Integer custid)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getBalance(Integer)}
     * @param custid Integer 
     * @return String
     * @throws Exception
     */
    protected abstract String handleGetBalance(Integer custid)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return (MessageSource)
            BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}