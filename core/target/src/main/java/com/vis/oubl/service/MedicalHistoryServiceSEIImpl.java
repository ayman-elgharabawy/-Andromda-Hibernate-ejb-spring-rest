// license-header java merge-point
/* Autogenerated on 03/19/2016 08:16:05+0200 by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/WebServiceEndpoint.vsl in andromda-webservice cartridge
 * MODEL CLASS: Data::com.vis.oubl::service::MedicalHistoryService
 * STEREOTYPE:  WebService
*/
package com.vis.oubl.service;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * WebService Service Endpoint Implementation for the MedicalHistoryService service endpoint interface (MedicalHistoryServiceSEI).
 * 
 */

@Path("/medicalhistoryservice")
@Produces("application/json")
@Consumes("$operation.restConsumes")
public class MedicalHistoryServiceSEIImpl implements MedicalHistoryServiceSEI
{
    private static final Logger LOG = LoggerFactory.getLogger(MedicalHistoryServiceSEIImpl.class);
    private static final String className = "MedicalHistoryServiceSEIImpl";

   /**
    * Invokes the getCustomer service method on MedicalHistoryService.
    * 
    * @param id datatype Long required=true 
    * @return getCustomerResponse Object
    * @see MedicalHistoryServiceSEI#getCustomer(Long)
    */
    @Override
    @GET
    @Path("/login/{id}")
    @Produces("application/json")
    @Consumes("application/json")
    public Object getCustomer
    (
        @PathParam("id") Long id
    )
    {
        LOG.info(MedicalHistoryServiceSEIImpl.className + ".getCustomer: Executing with: "  + id);

        StringBuilder missing = new StringBuilder();

        if (id!=null)
        {

        }
        else
        {
            missing.append("id ");
        }

        if (missing.length()>0)
        {
            missing = missing.insert(0, "The following required parameters are missing from MedicalHistoryService.getCustomer: ");
            GetCustomer getCustomerReq = new GetCustomer();
            getCustomerReq.setId(id);
            LOG.error("MedicalHistoryServiceSEIImpl.getCustomer: " + missing.toString() + " in " + getCustomerReq.toString());
            throw new IllegalArgumentException(missing.toString());
        }
        MedicalHistoryServiceWSDelegate delegate = new MedicalHistoryServiceWSDelegate();
        Object objectReturn = delegate.getCustomer(id);
        LOG.info(MedicalHistoryServiceSEIImpl.className + "getCustomer: Returning MedicalHistoryService.getCustomer: " + objectReturn);
        return objectReturn;
    }

   /**
    * Invokes the getRedPlaneService service method on MedicalHistoryService.
    * 
    * @return getRedPlaneServiceResponse Object
    * @see MedicalHistoryServiceSEI#getRedPlaneService()
    */
    @Override
    @GET
    @Path("/search/")
    @Produces("application/json")
    @Consumes("application/json")
    public Object getRedPlaneService
    (
    )
    {
        LOG.info(MedicalHistoryServiceSEIImpl.className + ".getRedPlaneService: Executing with: " );

        MedicalHistoryServiceWSDelegate delegate = new MedicalHistoryServiceWSDelegate();
        Object objectReturn = delegate.getRedPlaneService();
        LOG.info(MedicalHistoryServiceSEIImpl.className + "getRedPlaneService: Returning MedicalHistoryService.getRedPlaneService: " + objectReturn);
        return objectReturn;
    }
}