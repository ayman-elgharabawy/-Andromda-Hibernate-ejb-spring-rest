// license-header java merge-point
/* Autogenerated on 03/19/2016 08:16:06+0200 by AndroMDA
 *
 * TEMPLATE:    cxf/CXFTestClient.vsl in andromda-webservices-cartridge
 * MODEL CLASS: Data::com.vis.oubl::service::SearchService
 * STEREOTYPE:  WebService
*/
package com.vis.oubl.service.test;

import com.vis.oubl.service.SearchServiceSEI;
import junit.framework.TestSuite;
import org.junit.Test;
import org.junit.runner.JUnitCore;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Remote component interface for the SearchService.
 * 
 */
public class SearchServiceWSITCase
    extends TestSuite
{
    private Object scenario = null;

    /**
     * Constructor with no parameters
     */
    public SearchServiceWSITCase()
    {
        super();
        this.setName("SearchServiceWSITCase");
    }

    /*
     * Constructor with service name
     * @param name Service name to be tested
    public SearchServiceWSITCase(String name)
    {
        super(name);
    }
     */

    /*
     * Constructor with service name and scenario - allows running one scenario data line from spreadsheet
     * @param name Service name to be tested
     * @param scenarioIn the first column of the spreadsheet
    public SearchServiceWSITCase(String name, Object scenarioIn)
    {
        super(name);
        this.setScenario(scenarioIn);
    }
     */

    /**
     * @return the scenario
     */
    public Object getScenario()
    {
        return this.scenario;
    }

    /**
     * @param scenarioIn the scenario to set
     */
    public void setScenario(Object scenarioIn)
    {
        this.scenario = scenarioIn;
    }

    /*
     * JUnit test suite, calls DataDrivenTestSuite with data from SearchService.xls
     * @return TestSuite with ServiceName driver
    public static TestSuite suite()
    {
        // Uncomment to create DataDrivenTests with Excel data inputs
        // TestDriverDefinition parameters: dataClass, filename, sheet name. Populates dataClass with spreadsheet contents.
        //TestDriverDefinition driverDef = new TestDriverDefinition(SearchServiceTestData.class, "SearchService.xls", "SearchService");
        //DataDrivenTestSuite suite = new DataDrivenTestSuite(SearchServiceWSITCase.class, driverDef);
        // TODO: post processing of data and suite elements through a delegate class/method
        // Use this for running JUnit 4 tests with JUnit 3 test runner.
        //junit.framework.JUnit4TestAdapter(SearchServiceWSITCase.class);
        TestSuite suite = new TestSuite();
        suite.addTest(new SearchServiceWSITCase("createCustomer"));
        suite.addTest(new SearchServiceWSITCase("customerSearch"));
        suite.addTest(new SearchServiceWSITCase("customersQuery"));
        suite.addTest(new SearchServiceWSITCase("deleteCustomer"));
        suite.addTest(new SearchServiceWSITCase("updateCustomer"));
        return suite;
    }
     */

    /** Run JUnit tests from the java main command line
     * @param args ignored
     */
    public static void main(String args[])
    {
        JUnitCore.main("com.vis.oubl.service.test.SearchServiceWSITCase");
    }

    // ---------------- test methods  ----------------------

   /**
    * Invokes the createCustomer service method on SearchService.
    * 
    * Operation parameters:
    *     patient com.vis.oubl.vo.My010CustomerVO
    * Operation return:
    *     createCustomerResponse java.lang.Integer
    */
    @Test
    public void createCustomer()
    {
        System.out.println("Starting test: createCustomer for " + this.getName());
        // TestCase.setUp and tearDown methods for each individual service method test
        com.vis.oubl.service.CreateCustomerImpl.createCustomerSetUp();
        // Customize CreateInput method if different default input data is required.
        com.vis.oubl.service.CreateCustomer createCustomerInput = com.vis.oubl.service.CreateCustomerImpl.createCustomerCreateInput();
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"cxf-client.xml"});

        SearchServiceSEI client = (SearchServiceSEI)context.getBean("SearchServiceClient");

        java.lang.Integer createCustomerResponse = null;
        try
        {
            createCustomerResponse = client.createCustomer(
                 createCustomerInput.getPatient()  // com.vis.oubl.vo.My010CustomerVO
            );
            if (createCustomerResponse==null)
            {
                System.out.println("createCustomerResponse Result was valid and null");
            }
            else
            {
                System.out.println(" Result = " + createCustomerResponse.toString());
            }
        }
        catch (Exception ex)
        {
            System.out.println("SearchService client.createCustomer" + " threw exception " + ex);
            throw new junit.framework.AssertionFailedError(ex.toString());
        }
        com.vis.oubl.service.CreateCustomerImpl.createCustomerTearDown();
        System.out.println("Finished test for SearchService.createCustomer(patient)");
    }

   /**
    * Invokes the customerSearch service method on SearchService.
    * 
    * Operation parameters:
    *     id java.lang.Integer
    * Operation return:
    *     customerSearchResponse java.lang.Object
    */
    @Test
    public void customerSearch()
    {
        System.out.println("Starting test: customerSearch for " + this.getName());
        // TestCase.setUp and tearDown methods for each individual service method test
        com.vis.oubl.service.CustomerSearchImpl.customerSearchSetUp();
        // Customize CreateInput method if different default input data is required.
        com.vis.oubl.service.CustomerSearch customerSearchInput = com.vis.oubl.service.CustomerSearchImpl.customerSearchCreateInput();
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"cxf-client.xml"});

        SearchServiceSEI client = (SearchServiceSEI)context.getBean("SearchServiceClient");

        java.lang.Object customerSearchResponse = null;
        try
        {
            customerSearchResponse = client.customerSearch(
                 customerSearchInput.getId()  // java.lang.Integer
            );
            if (customerSearchResponse==null)
            {
                System.out.println("customerSearchResponse Result was valid and null");
            }
            else
            {
                System.out.println(" Result = " + customerSearchResponse.toString());
            }
        }
        catch (Exception ex)
        {
            System.out.println("SearchService client.customerSearch" + " threw exception " + ex);
            throw new junit.framework.AssertionFailedError(ex.toString());
        }
        com.vis.oubl.service.CustomerSearchImpl.customerSearchTearDown();
        System.out.println("Finished test for SearchService.customerSearch(id)");
    }

   /**
    * Invokes the customersQuery service method on SearchService.
    * 
    * Operation parameters:
    * Operation return:
    *     customersQueryResponse java.lang.Object
    */
    @Test
    public void customersQuery()
    {
        System.out.println("Starting test: customersQuery for " + this.getName());
        // TestCase.setUp and tearDown methods for each individual service method test
        com.vis.oubl.service.CustomersQueryImpl.customersQuerySetUp();
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"cxf-client.xml"});

        SearchServiceSEI client = (SearchServiceSEI)context.getBean("SearchServiceClient");

        java.lang.Object customersQueryResponse = null;
        try
        {
            customersQueryResponse = client.customersQuery(
            );
            if (customersQueryResponse==null)
            {
                System.out.println("customersQueryResponse Result was valid and null");
            }
            else
            {
                System.out.println(" Result = " + customersQueryResponse.toString());
            }
        }
        catch (Exception ex)
        {
            System.out.println("SearchService client.customersQuery" + " threw exception " + ex);
            throw new junit.framework.AssertionFailedError(ex.toString());
        }
        com.vis.oubl.service.CustomersQueryImpl.customersQueryTearDown();
        System.out.println("Finished test for SearchService.customersQuery()");
    }

   /**
    * Invokes the deleteCustomer service method on SearchService.
    * 
    * Operation parameters:
    *     id java.lang.Long
    * Operation return:
    *     deleteCustomerResponse java.lang.Integer
    */
    @Test
    public void deleteCustomer()
    {
        System.out.println("Starting test: deleteCustomer for " + this.getName());
        // TestCase.setUp and tearDown methods for each individual service method test
        com.vis.oubl.service.DeleteCustomerImpl.deleteCustomerSetUp();
        // Customize CreateInput method if different default input data is required.
        com.vis.oubl.service.DeleteCustomer deleteCustomerInput = com.vis.oubl.service.DeleteCustomerImpl.deleteCustomerCreateInput();
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"cxf-client.xml"});

        SearchServiceSEI client = (SearchServiceSEI)context.getBean("SearchServiceClient");

        java.lang.Integer deleteCustomerResponse = null;
        try
        {
            deleteCustomerResponse = client.deleteCustomer(
                 deleteCustomerInput.getId()  // java.lang.Long
            );
            if (deleteCustomerResponse==null)
            {
                System.out.println("deleteCustomerResponse Result was valid and null");
            }
            else
            {
                System.out.println(" Result = " + deleteCustomerResponse.toString());
            }
        }
        catch (Exception ex)
        {
            System.out.println("SearchService client.deleteCustomer" + " threw exception " + ex);
            throw new junit.framework.AssertionFailedError(ex.toString());
        }
        com.vis.oubl.service.DeleteCustomerImpl.deleteCustomerTearDown();
        System.out.println("Finished test for SearchService.deleteCustomer(id)");
    }

   /**
    * Invokes the updateCustomer service method on SearchService.
    * 
    * Operation parameters:
    *     patient com.vis.oubl.vo.My010CustomerVO
    * Operation return:
    *     updateCustomerResponse java.lang.Integer
    */
    @Test
    public void updateCustomer()
    {
        System.out.println("Starting test: updateCustomer for " + this.getName());
        // TestCase.setUp and tearDown methods for each individual service method test
        com.vis.oubl.service.UpdateCustomerImpl.updateCustomerSetUp();
        // Customize CreateInput method if different default input data is required.
        com.vis.oubl.service.UpdateCustomer updateCustomerInput = com.vis.oubl.service.UpdateCustomerImpl.updateCustomerCreateInput();
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"cxf-client.xml"});

        SearchServiceSEI client = (SearchServiceSEI)context.getBean("SearchServiceClient");

        java.lang.Integer updateCustomerResponse = null;
        try
        {
            updateCustomerResponse = client.updateCustomer(
                 updateCustomerInput.getPatient()  // com.vis.oubl.vo.My010CustomerVO
            );
            if (updateCustomerResponse==null)
            {
                System.out.println("updateCustomerResponse Result was valid and null");
            }
            else
            {
                System.out.println(" Result = " + updateCustomerResponse.toString());
            }
        }
        catch (Exception ex)
        {
            System.out.println("SearchService client.updateCustomer" + " threw exception " + ex);
            throw new junit.framework.AssertionFailedError(ex.toString());
        }
        com.vis.oubl.service.UpdateCustomerImpl.updateCustomerTearDown();
        System.out.println("Finished test for SearchService.updateCustomer(patient)");
    }

    /**
     * JUnit test data class, used by DataDrivenTestSuite in suite()
     */
    public static class SearchServiceTestData
    {
        // TODO: Add test data fields here (populated by SearchService.xls spreadsheet
        // TODO: Recursively list every primitive parameter in entire operation parameter hierarchy

        @SuppressWarnings("unused")
        private com.vis.oubl.vo.My010CustomerVO createCustomerPatient;
        /**
         * Data value for patient createCustomer on used by DataDrivenTestSuite in suite().
         * createCustomerpatient must be the column name of the parameter in the spreadsheet
         * @param value My010CustomerVO to be populated manually
         */
        public void setCreateCustomerPatient(com.vis.oubl.vo.My010CustomerVO value)
        {
            this.createCustomerPatient = value;
        }

        @SuppressWarnings("unused")
        private java.lang.Integer customerSearchId;
        /**
         * Data value for id customerSearch on used by DataDrivenTestSuite in suite().
         * customerSearchid must be the column name of the parameter in the spreadsheet
         * @param value Integer to be populated manually
         */
        public void setCustomerSearchId(java.lang.Integer value)
        {
            this.customerSearchId = value;
        }

        @SuppressWarnings("unused")
        private java.lang.Long deleteCustomerId;
        /**
         * Data value for id deleteCustomer on used by DataDrivenTestSuite in suite().
         * deleteCustomerid must be the column name of the parameter in the spreadsheet
         * @param value Long to be populated manually
         */
        public void setDeleteCustomerId(java.lang.Long value)
        {
            this.deleteCustomerId = value;
        }

        @SuppressWarnings("unused")
        private com.vis.oubl.vo.My010CustomerVO updateCustomerPatient;
        /**
         * Data value for patient updateCustomer on used by DataDrivenTestSuite in suite().
         * updateCustomerpatient must be the column name of the parameter in the spreadsheet
         * @param value My010CustomerVO to be populated manually
         */
        public void setUpdateCustomerPatient(com.vis.oubl.vo.My010CustomerVO value)
        {
            this.updateCustomerPatient = value;
        }
    }
}
