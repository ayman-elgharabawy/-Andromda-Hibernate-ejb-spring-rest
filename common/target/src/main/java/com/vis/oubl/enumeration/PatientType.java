// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TypeSafeEnumeration.vsl in andromda-java-cartridge.
// Model Class:  Data::com.vis.oubl::enumeration::PatientType
// Metafacade:   org.andromda.metafacades.uml.Enumeration
// Stereotype:  Enumeration
//
package com.vis.oubl.enumeration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 */
@XmlEnum
@XmlType(name="PatientType")
public enum PatientType
{
    /** TODO: Model Documentation for Enumeration Literal INSURANCE value "INSURANCE" */
    @XmlEnumValue("INSURANCE")
    INSURANCE("INSURANCE"),
    /** TODO: Model Documentation for Enumeration Literal NONINSURANCE value "NONINSURANCE" */
    @XmlEnumValue("NONINSURANCE")
    NONINSURANCE("NONINSURANCE");

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 3214726496851657676L;

    private final String enumValue;

    /**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private PatientType(String value)
    {
        this.enumValue = value;
    }

    /*
     * Do not override this method directly. Use an alternate name
     * if providing a different toString implementation
     * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
     */

    /**
     * Retrieves an instance of PatientType from <code>its name</code>.
     *
     * @param name the name to create the PatientType from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static PatientType fromString(String name)
    {
        return PatientType.valueOf(name);
    }

    /**
     * Returns an enumeration literal String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return String with corresponding value
     */
    public String value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of PatientType from String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the PatientType from.
     * @return static Enumeration with corresponding value
     */
    public static PatientType fromValue(String value)
    {
        for (PatientType enumName: PatientType.values())
        {
            if (enumName.getValue().equals(value))
            {
                return enumName;
            }
        }
        throw new IllegalArgumentException("PatientType.fromValue(" + value + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public String getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<String> literals()
    {
        return PatientType.literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return PatientType.names;
    }

    private static Map<String, PatientType> values = new LinkedHashMap<String, PatientType>(2, 1);
    private static List<String> literals = new ArrayList<String>(2);
    private static List<String> names = new ArrayList<String>(2);
    private static List<PatientType> valueList = new ArrayList<PatientType>(2);

    /**
     * Initializes the values.
     */
    static
    {
        synchronized (PatientType.values)
        {
            PatientType.values.put(INSURANCE.enumValue, INSURANCE);
            PatientType.values.put(NONINSURANCE.enumValue, NONINSURANCE);
        }
        synchronized (PatientType.valueList)
        {
            PatientType.valueList.add(INSURANCE);
            PatientType.valueList.add(NONINSURANCE);
            PatientType.valueList = Collections.unmodifiableList(valueList);
        }
        synchronized (PatientType.literals)
        {
            PatientType.literals.add(INSURANCE.enumValue);
            PatientType.literals.add(NONINSURANCE.enumValue);
            PatientType.literals = Collections.unmodifiableList(literals);
        }
        synchronized (PatientType.names)
        {
            PatientType.names.add("INSURANCE");
            PatientType.names.add("NONINSURANCE");
            PatientType.names = Collections.unmodifiableList(names);
        }
    }
    // type-safe-enumeration-object java merge-point
}