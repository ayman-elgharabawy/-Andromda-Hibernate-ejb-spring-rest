// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TypeSafeEnumeration.vsl in andromda-java-cartridge.
// Model Class:  Data::com.vis.oubl::enumeration::MedicalServiceType
// Metafacade:   org.andromda.metafacades.uml.Enumeration
// Stereotype:  Enumeration
//
package com.vis.oubl.enumeration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 */
@XmlEnum
@XmlType(name="MedicalServiceType")
public enum MedicalServiceType
{
    /** TODO: Model Documentation for Enumeration Literal XRAY value "XRAY" */
    @XmlEnumValue("XRAY")
    XRAY("XRAY"),
    /** TODO: Model Documentation for Enumeration Literal BLOODGULUCOSE value "BLOODGULUCOSE" */
    @XmlEnumValue("BLOODGULUCOSE")
    BLOODGULUCOSE("BLOODGULUCOSE"),
    /** TODO: Model Documentation for Enumeration Literal BLOODPRESSURE value "BLOODPRESSURE" */
    @XmlEnumValue("BLOODPRESSURE")
    BLOODPRESSURE("BLOODPRESSURE");

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1288146397772152319L;

    private final String enumValue;

    /**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private MedicalServiceType(String value)
    {
        this.enumValue = value;
    }

    /*
     * Do not override this method directly. Use an alternate name
     * if providing a different toString implementation
     * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
     */

    /**
     * Retrieves an instance of MedicalServiceType from <code>its name</code>.
     *
     * @param name the name to create the MedicalServiceType from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static MedicalServiceType fromString(String name)
    {
        return MedicalServiceType.valueOf(name);
    }

    /**
     * Returns an enumeration literal String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return String with corresponding value
     */
    public String value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of MedicalServiceType from String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the MedicalServiceType from.
     * @return static Enumeration with corresponding value
     */
    public static MedicalServiceType fromValue(String value)
    {
        for (MedicalServiceType enumName: MedicalServiceType.values())
        {
            if (enumName.getValue().equals(value))
            {
                return enumName;
            }
        }
        throw new IllegalArgumentException("MedicalServiceType.fromValue(" + value + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public String getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<String> literals()
    {
        return MedicalServiceType.literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return MedicalServiceType.names;
    }

    private static Map<String, MedicalServiceType> values = new LinkedHashMap<String, MedicalServiceType>(3, 1);
    private static List<String> literals = new ArrayList<String>(3);
    private static List<String> names = new ArrayList<String>(3);
    private static List<MedicalServiceType> valueList = new ArrayList<MedicalServiceType>(3);

    /**
     * Initializes the values.
     */
    static
    {
        synchronized (MedicalServiceType.values)
        {
            MedicalServiceType.values.put(XRAY.enumValue, XRAY);
            MedicalServiceType.values.put(BLOODGULUCOSE.enumValue, BLOODGULUCOSE);
            MedicalServiceType.values.put(BLOODPRESSURE.enumValue, BLOODPRESSURE);
        }
        synchronized (MedicalServiceType.valueList)
        {
            MedicalServiceType.valueList.add(XRAY);
            MedicalServiceType.valueList.add(BLOODGULUCOSE);
            MedicalServiceType.valueList.add(BLOODPRESSURE);
            MedicalServiceType.valueList = Collections.unmodifiableList(valueList);
        }
        synchronized (MedicalServiceType.literals)
        {
            MedicalServiceType.literals.add(XRAY.enumValue);
            MedicalServiceType.literals.add(BLOODGULUCOSE.enumValue);
            MedicalServiceType.literals.add(BLOODPRESSURE.enumValue);
            MedicalServiceType.literals = Collections.unmodifiableList(literals);
        }
        synchronized (MedicalServiceType.names)
        {
            MedicalServiceType.names.add("XRAY");
            MedicalServiceType.names.add("BLOODGULUCOSE");
            MedicalServiceType.names.add("BLOODPRESSURE");
            MedicalServiceType.names = Collections.unmodifiableList(names);
        }
    }
    // type-safe-enumeration-object java merge-point
}