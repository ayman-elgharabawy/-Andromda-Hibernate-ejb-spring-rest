
// license-header java merge-point
/**
 * Generated by java cartridge TibcoDaoImpl.vsl
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.vis.oubl.domain.CustomerProfile;
import com.vis.oubl.domain.CustomerProfile.IConstants;
/**
 * @see com.vis.oubl.domain.CustomerProfile.CustomerProfile
 */
public class CustomerProfileImpl
    implements com.vis.oubl.domain.CustomerProfile.CustomerProfile
{

    /**
     * @see com.vis.oubl.domain.CustomerProfile.CustomerProfile#getBalance(java.lang.Integer)
     */
    @Override
	@Loggable(action=ActionType.INQUIRY, tibcoId=IConstants.TIBCO_BALANCE_INQUIRY)
    public java.lang.String getBalance(java.lang.Integer custId)
    {
        // ${toDoTag} implement public java.lang.String getBalance(java.lang.Integer custId)
       
       /* Tibco Dao Implementation   */
       
       java.lang.String ResponseDTO = new java.lang.String();
		String urlStr = PropertiesReader.getInstance(
				IConstants.TIBCO_CONFIG_PROPERITES).getProperty(
				"tibco.balance.inquiry.url");

		
		$daofactory objectFactory = new ${daofactory}();
		$daofactoryRequest empoweredRequest = objectFactory
				.$daofactoryRquestMethod();
		$daoRequestData data = objectFactory
				.${daoRequestDataRequest}();
				
		BalanceInquiryHeader header = objectFactory.createHeader();
		
		BalanceInquiryCredentials credentials = objectFactory
				.createCredentials();
				
		data.setMSISDN(msisdn);
		empoweredRequest.setData(data);
		empoweredRequest.setHeader(header);
		header.setCredentials(objectFactory
				.createHeaderCredentials(credentials));

		credentials.setApplicationID("TSTUSR2");
		credentials.setLogin("SY");
		credentials.setPassword("INTERNET");
		JAXBContext requestContext;
		BalanceInquiryReply balanceInquiryReply = null;
		try {
			requestContext = getBalanceReqContext();
			// JAXBContext.newInstance(BalanceInquiryRequest.class,ObjectBalanceInquiryFactory.class);
			// requestContext.
			Marshaller m = requestContext.createMarshaller();
			m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,
					"http://xmlns.vfe.com.eg/INTERNET/Client/BalanceInquiry/request request.xsd");

			StringWriter sw = new StringWriter();
			m.marshal(empoweredRequest, sw);
			logger.info("request: msisdn+" + msisdn + ", " + sw.toString());
			JAXBContext responseContext = getBalanceRespContext();
			// JAXBContext.newInstance(BalanceInquiryReply.class);

			URL url = new URL(urlStr);
			HTTPConnector connector = new HTTPConnector(url);
			HTTPConnector.setMaxConcurrentRequests(url, 100);
			String response = connector.connect(sw.toString());
			logger.info("response: msisdn+" + msisdn + ", " + response);
			InputStream is = new ByteArrayInputStream(response.getBytes());
			Unmarshaller um = responseContext.createUnmarshaller();
			balanceInquiryReply = (BalanceInquiryReply) um.unmarshal(is);
		} catch (Exception e) {
			logger.error("TibcoDaoImpl :getBalanceInquiry() ", e);
			throw new DataAccessException(e.getMessage(), e);
		}

		balanceResponseDTO.setEcodeValue(balanceInquiryReply.getECodes()
				.getECode());
		balanceResponseDTO.setEcodeDesc(balanceInquiryReply.getECodes()
				.getEDescription());
		if (balanceInquiryReply.getECodes().getECode().equals("0")) {

			balanceResponseDTO.setAirtimeExp(balanceInquiryReply.getData()
					.getAirExpire());

			balanceResponseDTO.setMainBalance(balanceInquiryReply.getData()
					.getMainBalance());

			balanceResponseDTO.setServiceExp(balanceInquiryReply.getData()
					.getServiceExpire());

		}

		return balanceResponseDTO;
       
       /*    */
    }
}